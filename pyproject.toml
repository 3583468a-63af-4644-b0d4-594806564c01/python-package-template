[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[project]
name =  "ai_python_package"
authors = [
    {name = "Daniel Ciborowski", email = "dciborow@microsoft.com"},
]
description = "Sample Python Project for creating a new Python Module"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10"
]
requires-python = ">=3.7"
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "bandit[toml]==1.7.4",
    "black==22.1.0",
    "check-manifest==0.48",
    "flake8-bugbear==22.1.11",
    "flake8-docstrings",
    "flake8-formatter_junit_xml",
    "flake8==4.0.1",
    "pre-commit==2.17.0",
    "pylint==2.12.2",
    "pylint_junit",
    "pytest-cov==3.0.0",
    "pytest-mock<3.7.1",
    "pytest-runner",
    "pytest==7.1.0",
    "shellcheck-py==0.8.0.4"
]

[project.urls]
Documentation = "https://github.com/microsoft/python-package-template/tree/main#readme"
Source = "https://github.com/microsoft/python-package-template"
Tracker = "https://github.com/microsoft/python-package-template/issues"

[tool.bandit]
exclude_dirs = ["build","dist","tests","scripts"]
number = 4
recursive = true
skips = "B110,B311,B314,B404,B405,B406"
targets = "src"

[tool.black]
line-length = 120
fast = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
venv = "env37"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.7"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = "src" }
]

[tool.pytest.ini_options]
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "smoke: marks as smoke test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py, integration, spark, all

[testenv]
commands = 
    pytest -m "not integration and not spark" {posargs}

[testenv:integration]
commands = 
    pytest -m "integration" {posargs}

[testenv:spark]
extras = spark
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands = 
    pytest -m "spark" {posargs}

[testenv:all]
extras = all
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands = 
    pytest {posargs}
"""
